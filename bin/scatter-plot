#!/usr/bin/env ruby
require 'trollop'

DATA_FILE_NAME="/tmp/plot-"+`date  "+%s"`.strip+".dat"
PLOT_FILE_NAME="/tmp/plot-"+`date  "+%s"`.strip+".plt"


@opts = Trollop::options do
    banner "scatter-plot takes whitespace separated tables from stdin and renders them using gnuplot"
    opt :outfile, "Output file name", :type => String, :short => 'o'
    opt :legends, "Legend for columns, pipe separated list", :type => String, :short => 'l'
    opt :numc, "Number of data columns", :type => Integer, :short => 'c'
    opt :debug, "debug"
    opt :title, "Title", :type=> String, :short => 't'
    opt :font, "Font", :type => String, :short => 'f'
    opt :time, "Time format for time series data, strftime expression", :type => String
end

title = @opts[:title] || ""

# TODO I do want to be streamed!
input = `cat`
File.open(DATA_FILE_NAME, "w"){|f| f.write(input)}

numc_input=input.split(/\n/)[0].split(/\s+/).length - 1
puts "Detected numc y-columns #{numc_input}"

numc = @opts[:numc] || numc_input


legends = (@opts[:legends] ? @opts[:legends].strip().split(/,/) : (1..(numc)).map{|x| ""}).map{|x| x.strip}

font = @opts[:font] || "Futura"
font_size = "12"
using_list = legends.zip((2..100).to_a).map{|text, index| "'#{DATA_FILE_NAME}' using 1:#{index} title \"#{text}\" with points ps 2.0 lw 2.0" }.join(", ")



if (@opts[:outfile])
    filename = @opts[:outfile]
    extension = filename.gsub(/[^.]*\./,"")
    if (extension == "png")
        terminal=<<EOF
            set term pngcairo font '#{font},#{font_size}' transparent size 1200,800
            set output '#{filename}'

EOF
    elsif (extension == "eps")
        terminal=<<EOF
            set term epscairo font '#{font},#{font_size}'
            set output '#{filename}'
EOF
    elsif (extension == "pdf")
        terminal=<<EOF
            set term pdfcairo font '#{font},#{font_size}'
            set output '#{filename}'
EOF
    else
        throw "Unknown output format '.#{extension}'."
    end


end

if (@opts[:time])
    timeExpr=@opts[:time]
    time=<<EOF
set xdata time
set timefmt "#{timeExpr}"
set format x "%H:%M"
set autoscale x
EOF
else
    time=""
end


script = <<EOF
#{terminal}
set key top left
set offsets 1, 1, 1, 0
set title "#{title}"
#{time}
plot #{using_list}

EOF


puts "data file " + DATA_FILE_NAME
puts "plot file " + PLOT_FILE_NAME



File.open(PLOT_FILE_NAME, "w"){|f| f.write(script)}

`gnuplot #{PLOT_FILE_NAME}`
