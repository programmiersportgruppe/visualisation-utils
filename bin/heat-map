#!/usr/bin/env ruby
require 'trollop'
require 'mkmf'

DATA_FILE_NAME="/tmp/plot-"+`date  "+%s"`.strip+".dat"
PLOT_FILE_NAME="/tmp/plot-"+`date  "+%s"`.strip+".plt"


@opts = Trollop::options do
    banner "heat-map takes comma and newline separated table of coordinate from stdin and renders them using gnuplot"
    opt :outfile, "Output file name", :type => String, :short => 'o'
    opt :debug, "debug"
    opt :title, "Title", :type=> String, :short => 't'
    opt :font, "Font", :type => String, :short => 'f'
    opt :extra_header, "Extra commands to be put in the header of the gnuplot file", :type => String
end

title = @opts[:title] || ""

if (!find_executable 'gnuplot')
    STDERR.puts("This utility depends on gnuplot. Please install gnuplot using your favourite package manager.")
    exit(1)
end


# TODO I do want to be streamed!
input = `cat`

freq_list = input.split("\n").map{|line|
    line.split(",").map{|number | number.to_f.round(0)}.join(",")
}
.group_by{|coords| coords}
.map{|pair| [pair[0], pair[1].length]}

freqs=freq_list.inject({}) { |memo, obj|
   memo[obj.first] = obj.last
   memo
}

freq_values = freqs.values
max_val = freq_values.max
min_val = freq_values.min
mid_val = (min_val + (max_val - min_val)/2).round(1)

puts "Min. value: #{min_val}, max value: #{max_val}"

full_map = (-179..179).map{|lon|
   (-89..89).map{|lat|
       key = "#{lat},#{lon}"
       "#{lat} #{lon} #{freqs[key]||0}"
   }
}.join("\n")


File.open(DATA_FILE_NAME, "w"){|f| f.write(full_map)}

font = @opts[:font] || "Futura"
font_size = "12"

extra_header = @opts[:extra_header] || ""

if (@opts[:outfile])
    filename = @opts[:outfile]
    extension = filename.gsub(/[^.]*\./,"")
    if (extension == "png")
        terminal=<<EOF
            set term pngcairo font '#{font},#{font_size}' transparent size 1200,800
            set output '#{filename}'

EOF
    elsif (extension == "eps")
        terminal=<<EOF
            set term epscairo size 1200,800 font '#{font},#{font_size}'
            set output '#{filename}'
EOF
    elsif (extension == "pdf")
        terminal=<<EOF
            set term pdfcairo size 22cm,14cm font '#{font},#{font_size}'
            set output '#{filename}'
EOF
    elsif (extension == "svg")
        terminal=<<EOF
            set term svg size 1200,800 font '#{font},#{font_size}'
            set output '#{filename}'
EOF
    else
        throw "Unknown output format '.#{extension}'."
    end


end


world_dat=File.join(File.dirname(File.expand_path(__FILE__)), '/../world.dat')

script = <<EOF

#{terminal}
set title "#{title}"

# color definitions
set border lw 1.5
set style line 1 lc rgb 'black' lt 1 lw 2

set rmargin screen 0.85

unset key
set tics scale 0.5
unset xtics
unset ytics
set xrange[-179:179]
set yrange[-89:89]
#set format '%g'
set palette defined (0 "#00000000",#{min_val} "#00ffff",#{mid_val} "yellow",#{max_val} "red")
plot '#{DATA_FILE_NAME}' u 2:1:3 w image, \
     '#{world_dat}' with lines linestyle 1
EOF


puts "data file " + DATA_FILE_NAME
puts "plot file " + PLOT_FILE_NAME



File.open(PLOT_FILE_NAME, "w"){|f| f.write(script)}

`gnuplot #{PLOT_FILE_NAME}`

